/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ie.ncirl.softeng.security;

import ie.ncirl.softeng.clients.*;
import ie.ncirl.softeng.loans.Loan;
import java.util.Vector;

/**
 *
 * @author x12317886 Fiachra Devitt
 */
public class AdminTerminalGui extends javax.swing.JFrame {

    /**
     * Creates new form AdminTerminalGui
     */
    private Admin a = new Admin();
    private boolean loginOk = false;
    private Clients cs;
    private boolean loggedIn = false;
    Vector<Client> v;

    public AdminTerminalGui(Clients cs) {
        initComponents();
        setTitle("Admin Terminal");
        setResizable(false);
        commandsTf.requestFocus();
        this.cs = cs;
        v = cs.clientsList;
        terminalTa.append(">/addClient [id] [password] [pin] - Adds a new Client\n");
        terminalTa.append(">/setDetails [id] [name] [surname] [age] [address] [credit_history]\n");
        terminalTa.append("      [credit_card_history] [credit_history] [credit_card_history]\n");
        terminalTa.append("      [current_balance] - Sets Personal details for a client\n");
        terminalTa.append(">/addLoan [id] [amount] [status:Pending|Repayed] - Sets loan to Client\n");
        terminalTa.append("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        terminalTa = new javax.swing.JTextArea();
        commandsTf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        terminalTa.setColumns(20);
        terminalTa.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        terminalTa.setRows(5);
        jScrollPane1.setViewportView(terminalTa);

        jScrollPane1.setBounds(10, 10, 580, 270);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        commandsTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandsTfActionPerformed(evt);
            }
        });
        commandsTf.setBounds(10, 290, 580, 30);
        jLayeredPane1.add(commandsTf, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void commandsTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandsTfActionPerformed
        String commands[] = commandsTf.getText().split(" ");
        if (commands[0].equals("/login")) {
            if (loggedIn) {
                terminalTa.append("You are already logged in!\n");
            } else {
                String id = commands[1];
                char[] pass = commands[2].toCharArray();
                terminalTa.append(commandsTf.getText() + "\n");
                if (a.validateAdmin(id, pass)) {
                    terminalTa.append("Login successful\n");
                    loginOk = true;
                    loggedIn = true;
                    commandsTf.setText("");
                    commandsTf.requestFocus();
                } else {
                    terminalTa.append("Login failed!\n");
                    commandsTf.setText("");
                    commandsTf.requestFocus();
                }
            }
        } else if (commands[0].equals("/addClient")) {
            terminalTa.append(commandsTf.getText() + "\n");
            if (loginOk) {
                String id = commands[1];
                String textPass = commands[2];
                int digitPass = Integer.parseInt(commands[3]);
                cs.clientsList.add(new Client(id, textPass, digitPass));
                terminalTa.append("Client created successfully.\n");
                commandsTf.setText("");
                commandsTf.requestFocus();
            } else {
                terminalTa.append("You have insufficient permissions for this operation!\n");
                commandsTf.setText("");
                commandsTf.requestFocus();
            }


        } else if (commands[0].equals("/setDetails")) {
            terminalTa.append(commandsTf.getText() + "\n");
            if (loginOk) {
                String id = commands[1];
                String name = commands[2];
                String surname = commands[3];
                String age = commands[4];
                String address = commands[5];
                String creditHistory = commands[6];
                String creditCardHistory = commands[7];
                String currentBalance = commands[8];
                long cardNum;
                try {
                    cardNum = Long.parseLong(commands[9]);
                } catch (NumberFormatException e) {
                    cardNum = 0;
                }


                int index = searchClient(commands[1]);

                if (index < 0) {
                    terminalTa.append("Specified client does not exist!\n");
                } else {
                    Client c = v.get(index);
                    c.setAddress(address);
                    c.setAge(age);
                    c.setCardNum(cardNum);
                    c.setCreditCardHistory(creditCardHistory);
                    c.setCreditHistory(creditHistory);
                    c.setCurrentBalance(currentBalance);
                    c.setName(name);
                    c.setSurname(surname);
                    terminalTa.append("Data set successfully.\n");
                }
                commandsTf.setText("");
                commandsTf.requestFocus();
            }
        } else if (commands[0].equals("/addLoan")) {
            terminalTa.append (commands[0] + "\n");
            int index = searchClient(commands[1]);
            if (index < 0) {
                terminalTa.append("Specified client does not exist!\n");
            } else {
                Client c = v.get(index);
                long amt;
                try {
                    amt = Long.parseLong(commands[2]);
                } catch (NumberFormatException e) {
                    amt = 0;
                }
                String status = commands[3];
                c.loans.add(new Loan(amt, status));
                terminalTa.append("Loan added successfuly. Loan status: " + status + "\n");
            }
            commandsTf.setText("");
            commandsTf.requestFocus();
        }

    }//GEN-LAST:event_commandsTfActionPerformed

    private int searchClient(String id) {
        int x = 0;
        for (int i = 0; i < v.size(); i++) {
            Client c = v.get(i);
            if (c.getId().equals(id)) {
                x = 0;
                break;
            } else {
                x = -1;
            }
        }
        return x;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField commandsTf;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea terminalTa;
    // End of variables declaration//GEN-END:variables
}
